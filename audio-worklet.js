AudioWorkletProcessor.prototype._m3=function(){this._n3=true;this.port.onmessage=(_o3)=>{if(_o3.data==="kill")this._n3=false;};};class _p3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._m3();}process(_q3,_r3,parameters){const input=_q3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _s3=input[c];for(let _t3=0;_t3<_s3.length;++_t3){const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];
_r3[_u3][c][_t3]=_s3[_t3];}}return this._n3;}}class _v3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._m3();}process(_q3,_r3,parameters){const _w3=_q3[0];const _x3=_q3[1];const output=_r3[0];const gain=parameters.gain;for(let c=0;c<_x3.length;++c){const _s3=_x3[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3)_y3[_t3]=_s3[_t3];}for(let c=0;c<_w3.length;++c){const _s3=_w3[c];const _y3=output[c];
for(let _t3=0;_t3<_s3.length;++_t3){const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];_y3[_t3]+=_s3[_t3]*_z3;}}return this._n3;}}registerProcessor("audio-bus-input",_p3);registerProcessor("audio-bus-output",_v3);class _A3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _B3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._E3=new Float32Array(_D3);this._F3=new Uint32Array(_D3);}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){_y3[_t3]=_s3[_t3];if(this._F3[c]===0)this._E3[c]=_s3[_t3];const _G3=(factor[_t3]!==undefined)?factor[_t3]:factor[0];++this._F3[c];this._F3[c]%=_G3;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];if(_u3>0.0){continue;}let _H3=this._E3[c];const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];_H3*=_z3;_H3=Math.max(Math.min(_H3,
1.0),-1.0);const _I3=(resolution[_t3]!==undefined)?resolution[_t3]:resolution[0];const max=(_H3>0.0)?_A3._B3[_I3]-1:_A3._B3[_I3];_H3=Math.round(_H3*max)/max;const _J3=(mix[_t3]!==undefined)?mix[_t3]:mix[0];_y3[_t3]*=(1.0-_J3);_y3[_t3]+=(_H3*_J3);}}return this._n3;}}registerProcessor("bitcrusher-processor",_A3);class _K3{constructor(_L3=1e-3){this.setTime(_L3);}setTime(_L3){this._M3=Math.exp(-1/(_L3*sampleRate));}process(_N3,_O3){return _N3+this._M3*(_O3-_N3);}}class _P3{constructor(_Q3,_R3){this._S3=new _K3(_Q3);
this._T3=new _K3(_R3);this._U3=_Q3;this._V3=_R3;}_W3(_L3){if(_L3===this._U3)return;this._S3.setTime(_L3);this._U3=_L3;}_X3(_L3){if(_L3===this._V3)return;this._T3.setTime(_L3);this._V3=_L3;}process(_N3,_O3){if(_N3>_O3)return this._S3.process(_N3,_O3);else return this._T3.process(_N3,_O3);}}class _Y3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_Z3){super();this._m3();const _S3=_Y3.parameterDescriptors.find(__3=>__3.name==="attack");const _T3=_Y3.parameterDescriptors.find(__3=>__3.name==="release");
this._04=new _P3(_S3.defaultValue,_T3.defaultValue);this._14=0;}process(_24,_34,_44){const input=_24[0];const output=_34[0];const bypass=_44.bypass;const ingain=_44.ingain;const outgain=_44.outgain;const threshold=_44.threshold;const ratio=_44.ratio;const attack=_44.attack;const release=_44.release;if(input.length===0)return this._n3;for(let _t3=0;_t3<input[0].length;++_t3){let frame=input.map(_54=>_54[_t3]);output.forEach((_54,_64)=>{_54[_t3]=frame[_64];});const _74=(ingain[_t3]!==undefined)?ingain[_t3]:ingain[0];
frame=frame.map(_84=>_84*=_74);const rect=frame.map(_84=>Math.abs(_84));const max=Math.max(...rect);const _94=_a4(max);const _b4=(threshold[_t3]!==undefined)?threshold[_t3]:threshold[0];const _c4=_a4(_b4);const _d4=Math.max(0,_94-_c4);const _S3=(attack[_t3]!==undefined)?attack[_t3]:attack[0];const _T3=(release[_t3]!==undefined)?release[_t3]:release[0];this._04._W3(_S3);this._04._X3(_T3);this._14=this._04.process(_d4,this._14);const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];if(_u3>0)continue;const _I3=(ratio[_t3]!==undefined)?ratio[_t3]:ratio[0];
const _e4=(this._14/_I3)-this._14;const _z3=_f4(_e4);frame=frame.map(_84=>_84*=_z3);const _g4=(outgain[_t3]!==undefined)?outgain[_t3]:outgain[0];frame=frame.map(_84=>_84*=_g4);output.forEach((_54,_64)=>{_54[_t3]=frame[_64];});}return this._n3;}}function _a4(_h4){return 20*Math.log10(_h4);}function _f4(_h4){return Math.pow(10,_h4/20);}registerProcessor("compressor-processor",_Y3);class _i4 extends AudioWorkletProcessor{static _j4=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_i4._j4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];const _k4=(_i4._j4*sampleRate)+1;this.buffer=new Array(_D3);this._l4=new Uint32Array(_D3);for(let c=0;c<_D3;++c)this.buffer[c]=new Float32Array(_k4);
}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){_y3[_t3]=_s3[_t3];const _b4=(time[_t3]!==undefined)?time[_t3]:time[0];const _m4=this._n4(c,_b4);const _G3=(feedback[_t3]!==undefined)?feedback[_t3]:feedback[0];const _o4=_s3[_t3]+(_m4*_G3);this.write(c,_o4);const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];
if(_u3>0.0){continue;}const _J3=(mix[_t3]!==undefined)?mix[_t3]:mix[0];_y3[_t3]*=(1-_J3);_y3[_t3]+=(_m4*_J3);}}return this._n3;}_n4(_p4,_L3){const _q4=_L3*sampleRate;let _r4=(this._l4[_p4]-~~_q4);let _s4=(_r4-1);while(_r4<0)_r4+=this.buffer[_p4].length;while(_s4<0)_s4+=this.buffer[_p4].length;const frac=_q4-~~_q4;const _t4=this.buffer[_p4][_r4];const _u4=this.buffer[_p4][_s4];return _t4+(_u4-_t4)*frac;}write(_p4,_v4){++this._l4[_p4];this._l4[_p4]%=this.buffer[_p4].length;this.buffer[_p4][this._l4[_p4]]=_v4;
}}registerProcessor("delay-processor",_i4);class _w4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._m3();}process(_x4,_y4,_z4){const input=_x4[0];const _A4=_y4[0];const _B4=_y4[1];for(let c=0;c<input.length;++c){const _s3=input[c];const _C4=_A4[c];const _D4=_B4[c];for(let _t3=0;_t3<_s3.length;++_t3){_C4[_t3]=_s3[_t3];_D4[_t3]=_s3[_t3];}}return this._n3;}}class _E4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._m3();}process(_x4,_y4,_z4){const _w3=_x4[0];const _x3=_x4[1];const output=_y4[0];const bypass=_z4.bypass;for(let c=0;c<_x3.length;++c){const _F4=_w3[c];const _G4=_x3[c];const _y3=output[c];for(let _t3=0;_t3<_F4.length;++_t3){const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];if(_u3>0){_y3[_t3]=_G4[_t3];}else {_y3[_t3]=_F4[_t3];}}}return this._n3;}}registerProcessor("eq-input",_w4);registerProcessor("eq-output",_E4);class _H4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._m3();}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){_y3[_t3]=_s3[_t3];const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];
if(_u3>0.0){continue;}const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];_y3[_t3]*=_z3;}}return this._n3;}}registerProcessor("gain-processor",_H4);class _I4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_J4),minValue:10.0,maxValue:_J4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._K4=0;this._L4=0;this._M4=0;this._N4=0;this._O4=0;this._P4=new Float32Array(_D3);this._Q4=new Float32Array(_D3);this._R4=new Float32Array(_D3);this._S4=new Float32Array(_D3);this._T4=-1;this._U4=-1;this._V4=-1;}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _W4=(freq.length===1&&q.length===1&&gain.length===1);if(_W4)this._X4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){if(_W4===false){const _G3=(freq[_t3]!==undefined)?freq[_t3]:freq[0];const _Y4=(q[_t3]!==undefined)?q[_t3]:q[0];const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];this._X4(_G3,_Y4,_z3);}const _Z4=this._M4*_s3[_t3]+this._N4*this._P4[c]+this._O4*this._Q4[c]-this._K4*this._R4[c]-this._L4*this._S4[c];this._Q4[c]=this._P4[c];
this._P4[c]=_s3[_t3];this._S4[c]=this._R4[c];this._R4[c]=_Z4;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];_y3[_t3]=(_u3>0)?_s3[_t3]:_Z4;}}return this._n3;}_X4(__4,_05,_15){if(__4===this._T4&&_05===this._U4&&_15===this._V4)return;const _25=2*Math.PI*__4/sampleRate;const _35=Math.cos(_25);const _45=Math.sqrt(_15);const _55=_45+1;const _65=_45-1;const _75=_55*_35;const _85=_65*_35;const _95=_55-_85;const _a5=_55+_85;const alpha=Math.sin(_25)/(2*_05);const _b5=(2*Math.sqrt(_45)*alpha);const _c5=_95+_b5;
const _K4=2*(_65-_75);const _L4=_95-_b5;const _M4=_45*(_a5+_b5);const _N4=-2*_45*(_65+_75);const _O4=_45*(_a5-_b5);this._K4=_K4/_c5;this._L4=_L4/_c5;this._M4=_M4/_c5;this._N4=_N4/_c5;this._O4=_O4/_c5;this._T4=__4;this._U4=_05;this._V4=_15;}}registerProcessor("hi-shelf-processor",_I4);class _d5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _e5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_e5),minValue:10.0,maxValue:_e5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._K4=0;this._L4=0;this._M4=0;this._N4=0;this._O4=0;this._P4=new Float32Array(_D3);this._Q4=new Float32Array(_D3);this._R4=new Float32Array(_D3);this._S4=new Float32Array(_D3);this._f5=-1;this._U4=-1;}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _W4=(cutoff.length===1&&q.length===1);if(_W4)this._X4(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){if(_W4===false){const c=(cutoff[_t3]!==undefined)?cutoff[_t3]:cutoff[0];const _Y4=(q[_t3]!==undefined)?q[_t3]:q[0];this._X4(c,_Y4);}const _Z4=this._M4*_s3[_t3]+this._N4*this._P4[c]+this._O4*this._Q4[c]-this._K4*this._R4[c]-this._L4*this._S4[c];this._Q4[c]=this._P4[c];this._P4[c]=_s3[_t3];this._S4[c]=this._R4[c];
this._R4[c]=_Z4;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];_y3[_t3]=(_u3>0)?_s3[_t3]:_Z4;}}return this._n3;}_X4(_g5,_05){if(_g5===this._f5&&_05===this._U4)return;const _25=2*Math.PI*_g5/sampleRate;const alpha=Math.sin(_25)/(2*_05);const _35=Math.cos(_25);const _c5=1+alpha;const _K4=-2*_35;const _L4=1-alpha;const _M4=(1+_35)/2;const _N4=-1-_35;const _O4=(1+_35)/2;this._K4=_K4/_c5;this._L4=_L4/_c5;this._M4=_M4/_c5;this._N4=_N4/_c5;this._O4=_O4/_c5;this._f5=_g5;this._U4=_05;}}registerProcessor("hpf2-processor",
_d5);class _h5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_J4),minValue:10.0,maxValue:_J4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];
this._K4=0;this._L4=0;this._M4=0;this._N4=0;this._O4=0;this._P4=new Float32Array(_D3);this._Q4=new Float32Array(_D3);this._R4=new Float32Array(_D3);this._S4=new Float32Array(_D3);this._T4=-1;this._U4=-1;this._V4=-1;}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _W4=(freq.length===1&&q.length===1&&gain.length===1);if(_W4)this._X4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){if(_W4===false){const _G3=(freq[_t3]!==undefined)?freq[_t3]:freq[0];const _Y4=(q[_t3]!==undefined)?q[_t3]:q[0];const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];this._X4(_G3,_Y4,_z3);}const _Z4=this._M4*_s3[_t3]+this._N4*this._P4[c]+this._O4*this._Q4[c]-this._K4*this._R4[c]-this._L4*this._S4[c];this._Q4[c]=this._P4[c];this._P4[c]=_s3[_t3];this._S4[c]=this._R4[c];this._R4[c]=_Z4;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];
_y3[_t3]=(_u3>0)?_s3[_t3]:_Z4;}}return this._n3;}_X4(__4,_05,_15){if(__4===this._T4&&_05===this._U4&&_15===this._V4)return;const _25=2*Math.PI*__4/sampleRate;const _35=Math.cos(_25);const _45=Math.sqrt(_15);const _55=_45+1;const _65=_45-1;const _75=_55*_35;const _85=_65*_35;const _95=_55-_85;const _a5=_55+_85;const alpha=Math.sin(_25)/(2*_05);const _b5=(2*Math.sqrt(_45)*alpha);const _c5=_a5+_b5;const _K4=-2*(_65+_75);const _L4=_a5-_b5;const _M4=_45*(_95+_b5);const _N4=2*_45*(_65-_75);const _O4=_45*(_95-_b5);this._K4=_K4/_c5;
this._L4=_L4/_c5;this._M4=_M4/_c5;this._N4=_N4/_c5;this._O4=_O4/_c5;this._T4=__4;this._U4=_05;this._V4=_15;}}registerProcessor("lo-shelf-processor",_h5);class _i5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _e5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_e5),minValue:10.0,maxValue:_e5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._K4=0;this._L4=0;this._M4=0;this._N4=0;this._O4=0;this._P4=new Float32Array(_D3);this._Q4=new Float32Array(_D3);this._R4=new Float32Array(_D3);this._S4=new Float32Array(_D3);this._f5=-1;this._U4=-1;}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _W4=(cutoff.length===1&&q.length===1);if(_W4)this._X4(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){if(_W4===false){const c=(cutoff[_t3]!==undefined)?cutoff[_t3]:cutoff[0];const _Y4=(q[_t3]!==undefined)?q[_t3]:q[0];this._X4(c,_Y4);}const _Z4=this._M4*_s3[_t3]+this._N4*this._P4[c]+this._O4*this._Q4[c]-this._K4*this._R4[c]-this._L4*this._S4[c];this._Q4[c]=this._P4[c];this._P4[c]=_s3[_t3];this._S4[c]=this._R4[c];this._R4[c]=_Z4;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];_y3[_t3]=(_u3>0)?_s3[_t3]:_Z4;
}}return this._n3;}_X4(_g5,_05){if(_g5===this._f5&&_05===this._U4)return;const _25=2*Math.PI*_g5/sampleRate;const alpha=Math.sin(_25)/(2*_05);const _35=Math.cos(_25);const _c5=1+alpha;const _K4=-2*_35;const _L4=1-alpha;const _M4=(1-_35)/2;const _N4=1-_35;const _O4=(1-_35)/2;this._K4=_K4/_c5;this._L4=_L4/_c5;this._M4=_M4/_c5;this._N4=_N4/_c5;this._O4=_O4/_c5;this._f5=_g5;this._U4=_05;}}registerProcessor("lpf2-processor",_i5);class _j5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J4=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_J4),minValue:10.0,maxValue:_J4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._K4=0;this._L4=0;this._M4=0;this._N4=0;this._O4=0;this._P4=new Float32Array(_D3);this._Q4=new Float32Array(_D3);
this._R4=new Float32Array(_D3);this._S4=new Float32Array(_D3);this._T4=-1;this._U4=-1;this._V4=-1;}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _W4=(freq.length===1&&q.length===1&&gain.length===1);if(_W4)this._X4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){if(_W4===false){const _G3=(freq[_t3]!==undefined)?freq[_t3]:freq[0];
const _Y4=(q[_t3]!==undefined)?q[_t3]:q[0];const _z3=(gain[_t3]!==undefined)?gain[_t3]:gain[0];this._X4(_G3,_Y4,_z3);}const _Z4=this._M4*_s3[_t3]+this._N4*this._P4[c]+this._O4*this._Q4[c]-this._K4*this._R4[c]-this._L4*this._S4[c];this._Q4[c]=this._P4[c];this._P4[c]=_s3[_t3];this._S4[c]=this._R4[c];this._R4[c]=_Z4;const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];_y3[_t3]=(_u3>0)?_s3[_t3]:_Z4;}}return this._n3;}_X4(__4,_05,_15){if(__4===this._T4&&_05===this._U4&&_15===this._V4)return;const _25=2*Math.PI*__4/sampleRate;
const _35=Math.cos(_25);const _45=Math.sqrt(_15);const alpha=Math.sin(_25)/(2*_05);const _k5=alpha/_45;const _l5=alpha*_45;const _c5=1+_k5;const _K4=-2*_35;const _L4=1-_k5;const _M4=1+_l5;const _N4=_K4;const _O4=1-_l5;this._K4=_K4/_c5;this._L4=_L4/_c5;this._M4=_M4/_c5;this._N4=_N4/_c5;this._O4=_O4/_c5;this._T4=__4;this._U4=_05;this._V4=_15;}}registerProcessor("peak-eq-processor",_j5);class _m5{constructor(_n5){this._o5=0;this._p5=0;this.feedback=0;this._q5=0;this.buffer=new Float32Array(_n5);this._r5=0;}process(_v4){
const out=this.buffer[this._r5];this._q5=(this._q5*this._o5)+(out*this._p5);this.buffer[this._r5]=_v4+(this._q5*this.feedback);++this._r5;this._r5%=this.buffer.length;return out;}_s5(_t5){this.feedback=Math.min(Math.max(0,_t5),1);}_u5(_v5){this._o5=Math.min(Math.max(0,_v5),1);this._p5=1-this._o5;}}class _w5{constructor(_n5){this.feedback=0;this.buffer=new Float32Array(_n5);this._r5=0;}process(_v4){const out=this.buffer[this._r5];this.buffer[this._r5]=_v4+(out*this.feedback);++this._r5;this._r5%=this.buffer.length;
return(out-_v4);}_s5(_t5){this.feedback=Math.min(Math.max(0,_t5),1);}}class _x5 extends AudioWorkletProcessor{static _y5=8;static _z5=4;static _A5=0.015;static _B5=0.4;static _C5=0.28;static _D5=0.7;static _E5=[1116,1188,1277,1356,1422,1491,1557,1617];static _F5=[1139,1211,1300,1379,1445,1514,1580,1640];static _G5=[556,441,341,225];static _H5=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._I5=-1;this._J5=-1;this._K5=new Array(_D3);this._L5=new Array(_D3);const _M5=[_x5._E5,_x5._F5];const _N5=[_x5._G5,_x5._H5];for(let c=0;c<_D3;++c){this._K5[c]=new Array(_x5._y5);this._L5[c]=new Array(_x5._z5);for(let i=0;i<_x5._y5;
++i)this._K5[c][i]=new _m5(_M5[c%_M5.length][i]);for(let i=0;i<_x5._z5;++i)this._L5[c][i]=new _w5(_N5[c%_N5.length][i]);}this._O5(0.5);this._u5(0.5);for(let c=0;c<_D3;++c)for(let i=0;i<_x5._z5;++i)this._L5[c][i]._s5(0.5);}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _P5=0;_P5<_s3.length;++_P5){const _t3=(size[_P5]!==undefined)?size[_P5]:size[0];
const _Q5=(damp[_P5]!==undefined)?damp[_P5]:damp[0];this._O5(_t3);this._u5(_Q5);_y3[_P5]=_s3[_P5];let out=0;const _H3=_s3[_P5]*_x5._A5;for(let i=0;i<_x5._y5;++i)out+=this._K5[c][i].process(_H3);for(let i=0;i<_x5._z5;++i)out=this._L5[c][i].process(out);const _u3=(bypass[_P5]!==undefined)?bypass[_P5]:bypass[0];if(_u3>0.0){continue;}const _J3=(mix[_P5]!==undefined)?mix[_P5]:mix[0];_y3[_P5]*=(1-_J3);_y3[_P5]+=(out*_J3);}}return this._n3;}_O5(_n5){if(_n5===this._I5)return;const size=(_n5*_x5._C5)+_x5._D5;for(let c=0;
c<this._K5.length;++c)for(let i=0;i<_x5._y5;++i)this._K5[c][i]._s5(size);this._I5=_n5;}_u5(_v5){if(_v5===this._J5)return;const damp=_v5*_x5._B5;for(let c=0;c<this._K5.length;++c)for(let i=0;i<_x5._y5;++i)this._K5[c][i]._u5(damp);this._J5=_v5;}}registerProcessor("reverb1-processor",_x5);class _R5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_C3){super();this._m3();const _D3=_C3.outputChannelCount[0];this._S5=new Array(_D3).fill(1.0);this._T5=new Array(_D3).fill(0.0);this._U5=new Array(_D3).fill(_V5._W5._X5);this._Y5=new Array(_D3);for(let c=0;c<_D3;++c){this._Y5[c]=new _Z5();
this._Y5[c].__5(sampleRate);this._Y5[c]._06(this._S5[c]);this._Y5[c]._16(this._U5[c]);if(c%2===1){this._Y5[c]._26(this._T5[c]);}}}process(_q3,_r3,parameters){const input=_q3[0];const output=_r3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _s3=input[c];const _y3=output[c];for(let _t3=0;_t3<_s3.length;++_t3){_y3[_t3]=_s3[_t3];const _I3=(rate[_t3]!==undefined)?rate[_t3]:rate[0];
const _36=(offset[_t3]!==undefined)?offset[_t3]:offset[0];const _46=(shape[_t3]!==undefined)?shape[_t3]:shape[0];this._56(c,_I3,_36,_46);const _66=this._Y5[c]._n4();const _u3=(bypass[_t3]!==undefined)?bypass[_t3]:bypass[0];if(_u3>0.0){continue;}const i=(intensity[_t3]!==undefined)?intensity[_t3]:intensity[0];const out=_s3[_t3]*_66*i;_y3[_t3]*=(1.0-i);_y3[_t3]+=out;}}return this._n3;}_56(_p4,_76,_86,_96){if(_76!==this._S5[_p4]){this._Y5[_p4]._06(_76);this._S5[_p4]=_76;}if(_86!==this._T5[_p4]){if(_p4%2===1){
this._Y5[_p4]._26(_86);}this._T5[_p4]=_86;}if(_96!==this._U5[_p4]){this._Y5[_p4]._16(_96);this._U5[_p4]=_96;}}}registerProcessor("tremolo-processor",_R5);function _V5(){}_V5._W5={_X5:0,_a6:1,_b6:2,_c6:3,_d6:4,_e6:5};_V5._f6=function(_g6){return 1.0-_g6;};_V5._h6=function(_g6){return _g6;};_V5._i6=function(_g6){return 0.5*(Math.sin((_g6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_V5._j6=function(_g6){if(_g6<0.5){return 0.0;}return 1.0;};_V5._k6=function(_g6){if(_g6<0.5){return 2.0*_g6;}return 2.0-(2.0*_g6);};_V5._l6=[_V5._f6,
_V5._h6,_V5._i6,_V5._j6,_V5._k6];_m6._n6=512;_m6._o6=1.0/_m6._n6;function _m6(_p6){this.data=new Float32Array(_m6._n6);for(let i=0;i<_m6._n6;++i){this.data[i]=_p6(i*_m6._o6);}}_m6.prototype._n4=function(_g6){_g6=Math.max(0.0,_g6);_g6=Math.min(_g6,1.0);const _q6=_g6*_m6._n6;const _r6=~~_q6;const _s6=_q6-_r6;let _r4=_r6;let _s4=_r4+1;if(_r4>=_m6._n6){_r4-=_m6._n6;}if(_s4>=_m6._n6){_s4-=_m6._n6;}const _t4=this.data[_r4];const _u4=this.data[_s4];return _t4+(_u4-_t4)*_s6;};_Z5._t6=[];_Z5._u6=false;_Z5._v6=0.0;_Z5._J4=20.0;
function _Z5(){this._w6=48000;this.shape=_V5._W5._b6;this.freq=1.0;this._x6=0.0;this._o6=0.0;this._y6=0.0;if(_Z5._u6==true){return;}for(let i=0;i<_V5._W5._e6;++i){_Z5._t6[i]=new _m6(_V5._l6[i]);}_Z5._u6=true;}_Z5._z6=function(){return(_Z5._u6==true);};_Z5.prototype.__5=function(_A6){this._w6=_A6;this._B6();};_Z5.prototype._06=function(__4){__4=Math.max(_Z5._v6,__4);__4=Math.min(__4,_Z5._J4);this.freq=__4;this._B6();};_Z5.prototype._26=function(_86){_86=Math.max(0.0,_86);_86=Math.min(_86,1.0);const _C6=_86-this._y6;
this._y6=_86;this._x6+=_C6;while(this._x6>=1.0){this._x6-=1.0;}while(this._x6<0.0){this._x6+=1.0;}};_Z5.prototype._16=function(_96){_96=Math.max(0,_96);_96=Math.min(_96,_V5._W5._e6-1);this.shape=_96;};_Z5.prototype._n4=function(){const result=_Z5._t6[this.shape]._n4(this._x6);this._x6+=this._o6;while(this._x6>=1.0){this._x6-=1.0;}return result;};_Z5.prototype._B6=function(){this._o6=this.freq/this._w6;};